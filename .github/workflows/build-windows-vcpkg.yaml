# Copyright (c) 2019-2020-2021-2022 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT
#
# Source: https://raw.githubusercontent.com/lukka/CppBuildTasks-Validation/v10/.github/workflows/hosted-ninja-vcpkg_submod-autocache.yml
name: windows build
on: [push, workflow_dispatch]

jobs:
  job:
    name: ${{ github.workflow }}
    runs-on: windows-latest
    strategy:
      fail-fast: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          # This is useful to avoid https://github.com/microsoft/vcpkg/issues/25349
          # which is caused by missing Git history on the vcpkg submodule which ports 
          # try to access.
          fetch-depth: 0

      - name: Get CMake
        uses: lukka/get-cmake@latest

      - name: List $RUNNER_WORKSPACE before vcpkg is setup
        run: find $RUNNER_WORKSPACE
        shell: bash

      - name: Restore vcpkg executable and data files from GH Action cache, or setup vcpkg from scratch if there is a cache-miss
        uses: lukka/run-vcpkg@v11
        id: runvcpkg
        with:
          # This one is not needed, as it is the default value anyway.
          # vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgJsonGlob: 'vcpkg.json'
          # Leverage the cache containing vcpkg executable and data files (e.g. port files).
          doNotCache: false

      - name: Prints output of run-vcpkg's action.
        run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}' "

      - name: Run CMake and CPack
        uses: lukka/run-cmake@v10
        id: runcmake
        with:
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          configurePreset: 'windows-release'
          buildPreset: 'windows-release'
          packagePreset: 'windows-release'

      - name: Read output package name
        id: read-package-name
        shell: bash
        run: |
          PACKAGE_FILE_NAME=$(cat build/release/cpack_output_files.txt)
          echo "Package file name: $PACKAGE_FILE_NAME"
          echo "{package_file_name}={$PACKAGE_FILE_NAME}" >> "$GITHUB_OUTPUT"

      - name: Upload windows binaries artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries-${{ github.sha }}
          retention-days: 7
          if-no-files-found: error
          compression-level: 9
          path: |
            build/release/src/game/*.exe
            build/release/src/game/*.dll

      - name: Upload windows installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer-latest # keep only one artifact to limit storage requirements
          overwrite: true
          if-no-files-found: error
          compression-level: 0
          path: ${{ steps.read-package-name.outputs.package_file_name }}